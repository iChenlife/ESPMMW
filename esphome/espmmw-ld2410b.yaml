substitutions:
  device_name: espmmw

esphome:
  name: ${device_name}
  platformio_options:
    platform: https://github.com/tasmota/platform-espressif32.git#Tasmota/203
    platform_packages:
      - framework-arduinoespressif32@https://github.com/espressif/arduino-esp32.git#2.0.3
    board_build.flash_mode: dio
  on_boot:
    - priority: 600
      then:
        - esp32_ble_tracker.stop_scan:
    - priority: 200
      then:
        - esp32_ble_tracker.start_scan:

esp32:
  board: esp32-c3-devkitm-1
  framework:
    type: arduino

logger:

api:
  password: !secret api_password

ota:
  password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  fast_connect: on

web_server:
  port: 80

esp32_ble_tracker:
  scan_parameters:
    active: true

bluetooth_proxy:
  active: true

uart:
  id: uart_bus
  rx_pin: 6
  tx_pin: 5
  baud_rate: 256000
  data_bits: 8
  stop_bits: 1
  # debug:
  #   direction: BOTH
  #   after:
  #     delimiter: [0x04, 0x03, 0x02, 0x01]
  #   sequence:
  #     - lambda: UARTDebug::log_hex(direction, bytes, ' ');

button:
  - platform: restart
    id: ${device_name}_reboot
    name: ${device_name}_reboot

binary_sensor:
  - platform: gpio
    pin: 8
    id: ${device_name}_mmw
    name: ${device_name}_mmw
    device_class: occupancy
  - platform: gpio
    pin:
      number: 2
      mode:
        input: true
        pullup: true
      inverted: true
    name: ${device_name}_button
    on_press:
      then:
        - button.press: ${device_name}_reboot

sensor:
  - platform: uptime
    name: ${device_name}_uptime
  - platform: wifi_signal
    name: ${device_name}_signal
    update_interval: 60s
  - platform: adc
    pin: 3
    name: ${device_name}_brightness
    attenuation: 11db
    update_interval: 5s
    unit_of_measurement: "%"
    icon: mdi:brightness-6
    accuracy_decimals: 0
    filters:
      - lambda: |-
          return ( 3 - x ) / 0.03;
  - platform: template
    id: ${device_name}_cpu_temprature
    name: ${device_name}_cpu_temprature
    unit_of_measurement: Â°C
    device_class: temperature
    lambda: return temperatureRead();
    filters:
      - median:
          window_size: 3
          send_every: 3

text_sensor:
  - platform: wifi_info
    ip_address:
      name: ${device_name}_ip
    mac_address:
      name: ${device_name}_mac

remote_transmitter:
  pin: 1
  carrier_duty_percent: 50%