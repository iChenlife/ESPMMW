substitutions:
  device_name: espmmw

esphome:
  name: ${device_name}
  platformio_options:
    platform: https://github.com/tasmota/platform-espressif32.git#Tasmota/203
    platform_packages:
      - framework-arduinoespressif32@https://github.com/espressif/arduino-esp32.git#2.0.3
    board_build.flash_mode: dio
  includes:
    - LD2410.h
  on_boot:
    - priority: 600
      then:
        - esp32_ble_tracker.stop_scan:
    - priority: 250
      then:
        - esp32_ble_tracker.start_scan:

esp32:
  board: esp32-c3-devkitm-1
  framework:
    type: arduino

logger:

api:
  password: !secret api_password

ota:
  password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  fast_connect: on

web_server:
  port: 80

esp32_ble_tracker:
  scan_parameters:
    interval: 1100ms
    window: 1100ms
    active: true

bluetooth_proxy:

uart:
  id: uart_bus
  rx_pin: 6
  tx_pin: 5
  baud_rate: 256000
  data_bits: 8
  stop_bits: 1
  # debug:
  #   direction: BOTH
  #   after:
  #     delimiter: [0x04, 0x03, 0x02, 0x01]
  #   sequence:
  #     - lambda: UARTDebug::log_hex(direction, bytes, ' ');

globals:
  - id: uart_delay
    type: int
    restore_value: true
    initial_value: "100"
  - id: start
    type: std::vector<unsigned char>
    restore_value: false
    initial_value: "{0xFD, 0xFC, 0xFB, 0xFA, 0x04, 0x00, 0xFF, 0x00, 0x01, 0x00, 0x04, 0x03, 0x02, 0x01}"
  - id: end
    type: std::vector<unsigned char>
    restore_value: false
    initial_value: "{0xFD, 0xFC, 0xFB, 0xFA, 0x02, 0x00, 0xFE, 0x00, 0x04, 0x03, 0x02, 0x01}"
  - id: conf
    type: std::vector<unsigned char>
    restore_value: false
    initial_value: "{0xFD, 0xFC, 0xFB, 0xFA, 0x02, 0x00, 0x61, 0x00, 0x04, 0x03, 0x02, 0x01}"
  - id: reset
    type: std::vector<unsigned char>
    restore_value: false
    initial_value: "{0xFD, 0xFC, 0xFB, 0xFA, 0x02, 0x00, 0xA2, 0x00, 0x04, 0x03, 0x02, 0x01}"
  - id: reboot
    type: std::vector<unsigned char>
    restore_value: false
    initial_value: "{0xFD, 0xFC, 0xFB, 0xFA, 0x02, 0x00, 0xA3, 0x00, 0x04, 0x03, 0x02, 0x01}"
  - id: defaut_distance
    type: std::vector<unsigned char>
    restore_value: false
    initial_value: "{0xFD, 0xFC, 0xFB, 0xFA, 0x14, 0x00, 0x60, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01, 0x00, 0x08, 0x00, 0x00, 0x00, 0x02, 0x00, 0x05, 0x00, 0x00, 0x00, 0x04, 0x03, 0x02, 0x01}"
  - id: defaut_sensitivity
    type: std::vector<unsigned char>
    restore_value: false
    initial_value: "{0xFD, 0xFC, 0xFB, 0xFA, 0x14, 0x00, 0x64, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x01, 0x00, 0x63, 0x00, 0x00, 0x00, 0x02, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x04, 0x03, 0x02, 0x01}"
  - id: max_move_distance
    type: int
    restore_value: true
    initial_value: "0"
  - id: max_static_distance
    type: int
    restore_value: true
    initial_value: "0"
  - id: unattended_duration
    type: int
    restore_value: true
    initial_value: "0"
  - id: move_sensitivity
    type: int
    restore_value: true
    initial_value: "0"
  - id: static_sensitivity
    type: int
    restore_value: true
    initial_value: "0"

button:
  - platform: restart
    name: ${device_name}_reboot
  - platform: template
    id: ${device_name}_get_conf
    name: ${device_name}_get_conf
    on_press:
      - uart.write: !lambda return id(start);
      - delay: !lambda return id(uart_delay);
      - uart.write: !lambda return id(conf);
      - delay: !lambda return id(uart_delay);
      - uart.write: !lambda return id(end);
  - platform: template
    id: ${device_name}_reset_mmw
    name: ${device_name}_reset_mmw
    on_press:
      - uart.write: !lambda return id(start);
      - delay: !lambda return id(uart_delay);
      - uart.write: !lambda return id(defaut_distance);
      - uart.write: !lambda return id(defaut_sensitivity);
      - delay: !lambda return id(uart_delay);
      - uart.write: !lambda return id(end);
  - platform: template
    id: ${device_name}_reboot_mmw
    name: ${device_name}_reboot_mmw
    on_press:
      - uart.write: !lambda return id(start);
      - delay: !lambda return id(uart_delay);
      - uart.write: !lambda return id(reboot);
  - platform: template
    name: ${device_name}_tv_on_off
    on_press:
      - remote_transmitter.transmit_raw:
          carrier_frequency: 38kHz
          code:
            [
              9045,
              -4500,
              585,
              -520,
              578,
              -527,
              580,
              -525,
              578,
              -527,
              586,
              -518,
              579,
              -525,
              580,
              -525,
              585,
              -519,
              569,
              -1641,
              583,
              -1626,
              585,
              -1624,
              580,
              -1628,
              586,
              -1677,
              579,
              -1630,
              580,
              -526,
              583,
              -1625,
              586,
              -1623,
              586,
              -519,
              586,
              -1622,
              582,
              -1628,
              587,
              -518,
              580,
              -524,
              585,
              -520,
              586,
              -519,
              584,
              -520,
              585,
              -1650,
              584,
              -521,
              588,
              -517,
              580,
              -1630,
              584,
              -1624,
              585,
              -1624,
              586,
              -1623,
              585
            ]

number:
  - platform: template
    id: ${device_name}_max_move_distance
    name: ${device_name}_max_move_distance
    optimistic: true
    min_value: 0
    max_value: 8
    step: 1
    unit_of_measurement: x 0.75m
    set_action:
      - globals.set:
          id: max_move_distance
          value: !lambda return x;
      - uart.write: !lambda return id(start);
      - delay: !lambda return id(uart_delay);
      - uart.write: !lambda return {0xFD, 0xFC, 0xFB, 0xFA, 0x14, 0x00, 0x60, 0x00, 0x00, 0x00, (unsigned char)x, 0x00, 0x00, 0x00, 0x01, 0x00, (unsigned char)id(max_static_distance), 0x00, 0x00, 0x00, 0x02, 0x00, (unsigned char)id(unattended_duration), 0x00, 0x00, 0x00, 0x04, 0x03, 0x02, 0x01};
      - delay: !lambda return id(uart_delay);
      - uart.write: !lambda return id(end);
  - platform: template
    id: ${device_name}_max_static_distance
    name: ${device_name}_max_static_distance
    optimistic: true
    min_value: 0
    max_value: 8
    step: 1
    unit_of_measurement: x 0.75m
    set_action:
      - globals.set:
          id: max_static_distance
          value: !lambda return x;
      - uart.write: !lambda return id(start);
      - delay: !lambda return id(uart_delay);
      - uart.write: !lambda return {0xFD, 0xFC, 0xFB, 0xFA, 0x14, 0x00, 0x60, 0x00, 0x00, 0x00, (unsigned char)id(max_move_distance), 0x00, 0x00, 0x00, 0x01, 0x00, (unsigned char)x, 0x00, 0x00, 0x00, 0x02, 0x00, (unsigned char)id(unattended_duration), 0x00, 0x00, 0x00, 0x04, 0x03, 0x02, 0x01};
      - delay: !lambda return id(uart_delay);
      - uart.write: !lambda return id(end);
  - platform: template
    id: ${device_name}_unattended_duration
    name: ${device_name}_unattended_duration
    optimistic: true
    min_value: 0
    max_value: 600
    step: 1
    mode: box
    unit_of_measurement: s
    set_action:
      - globals.set:
          id: unattended_duration
          value: !lambda return x;
      - uart.write: !lambda return id(start);
      - delay: !lambda return id(uart_delay);
      - uart.write: !lambda return {0xFD, 0xFC, 0xFB, 0xFA, 0x14, 0x00, 0x60, 0x00, 0x00, 0x00, (unsigned char)id(max_move_distance), 0x00, 0x00, 0x00, 0x01, 0x00, (unsigned char)id(max_static_distance), 0x00, 0x00, 0x00, 0x02, 0x00, (unsigned char)x, 0x00, 0x00, 0x00, 0x04, 0x03, 0x02, 0x01};
      - delay: !lambda return id(uart_delay);
      - uart.write: !lambda return id(end);
  - platform: template
    id: ${device_name}_move_sensitivity
    name: ${device_name}_move_sensitivity
    optimistic: true
    min_value: 0
    max_value: 100
    step: 1
    mode: box
    set_action:
      - globals.set:
          id: move_sensitivity
          value: !lambda return x;
      - uart.write: !lambda return id(start);
      - delay: !lambda return id(uart_delay);
      - uart.write: !lambda return {0xFD, 0xFC, 0xFB, 0xFA, 0x14, 0x00, 0x64, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x01, 0x00, (unsigned char)x, 0x00, 0x00, 0x00, 0x02, 0x00, (unsigned char)id(static_sensitivity), 0x00, 0x00, 0x00, 0x04, 0x03, 0x02, 0x01};
      - delay: !lambda return id(uart_delay);
      - uart.write: !lambda return id(end);
  - platform: template
    id: ${device_name}_static_sensitivity
    name: ${device_name}_static_sensitivity
    optimistic: true
    min_value: 0
    max_value: 100
    step: 1
    mode: box
    set_action:
      - globals.set:
          id: static_sensitivity
          value: !lambda return x;
      - uart.write: !lambda return id(start);
      - delay: !lambda return id(uart_delay);
      - uart.write: !lambda return {0xFD, 0xFC, 0xFB, 0xFA, 0x14, 0x00, 0x64, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x01, 0x00, (unsigned char)id(move_sensitivity), 0x00, 0x00, 0x00, 0x02, 0x00, (unsigned char)x, 0x00, 0x00, 0x00, 0x04, 0x03, 0x02, 0x01};
      - delay: !lambda return id(uart_delay);
      - uart.write: !lambda return id(end);

binary_sensor:
  - platform: gpio
    pin: 8
    id: ${device_name}_mmw
    name: ${device_name}_mmw
    device_class: occupancy
  - platform: gpio
    pin:
      number: 2
      mode:
        input: true
        pullup: true
      inverted: true
    name: ${device_name}_button
    on_press:
      then:
        - button.press: ${device_name}_reset_mmw

sensor:
  - platform: uptime
    name: ${device_name}_uptime
  - platform: wifi_signal
    name: ${device_name}_signal
    update_interval: 60s
  - platform: adc
    pin: 3
    name: ${device_name}_brightness
    attenuation: 11db
    update_interval: 5s
    unit_of_measurement: "%"
    icon: mdi:brightness-6
    accuracy_decimals: 0
    filters:
      - lambda: |-
          return ( 3 - x ) / 0.03;
  - platform: template
    id: ${device_name}_cpu_temprature
    name: ${device_name}_cpu_temprature
    unit_of_measurement: °C
    device_class: temperature
    lambda: return temperatureRead();
  - platform: template
    id: ${device_name}_move_distance
    name: ${device_name}_move_distance
    unit_of_measurement: "cm"
  - platform: template
    id: ${device_name}_move_energy
    name: ${device_name}_move_energy
  - platform: template
    id: ${device_name}_static_distance
    name: ${device_name}_static_distance
    unit_of_measurement: "cm"
  - platform: template
    id: ${device_name}_static_energy
    name: ${device_name}_static_energy
  - platform: template
    id: ${device_name}_detection_distance
    name: ${device_name}_detection_distance
    unit_of_measurement: "cm"
  - platform: custom
    lambda: |-
      auto ld2410 = new LD2410(id(uart_bus));
      App.register_component(ld2410);
      return {ld2410->max_move_distance_sensor, 
      ld2410->max_static_distance_sensor,
      ld2410->unattended_duration_sensor,
      ld2410->move_sensitivity_sensor,
      ld2410->static_sensitivity_sensor,
      ld2410->status_sensor,
      ld2410->move_distance_sensor,
      ld2410->move_energy_sensor,
      ld2410->static_distance_sensor,
      ld2410->static_energy_sensor,
      ld2410->detection_distance_sensor};
    sensors:
      - name: max_move_distance_sensor
        internal: true
        on_value:
          then:
            - number.set:
                id: ${device_name}_max_move_distance
                value: !lambda return x;
      - name: max_static_distance_sensor
        internal: true
        on_value:
          then:
            - number.set:
                id: ${device_name}_max_static_distance
                value: !lambda return x;
      - name: unattended_duration_sensor
        internal: true
        on_value:
          then:
            - number.set:
                id: ${device_name}_unattended_duration
                value: !lambda return x;
      - name: move_sensitivity_sensor
        internal: true
        on_value:
          then:
            - number.set:
                id: ${device_name}_move_sensitivity
                value: !lambda return x;
      - name: static_sensitivity_sensor
        internal: true
        on_value:
          then:
            - number.set:
                id: ${device_name}_static_sensitivity
                value: !lambda return x;
      - name: status_sensor
        internal: true
        filters:
          - lambda: |-
              if (x ==0) {
                id(${device_name}_mmw_status).publish_state("OFF");
              } else if (x ==1) {
                id(${device_name}_mmw_status).publish_state("MOVE");
              } else if (x ==2) {
                id(${device_name}_mmw_status).publish_state("STATIC");
              }else {
                id(${device_name}_mmw_status).publish_state("ON");
              }
              return x;
      - name: move_distance_sensor
        internal: true
        on_value:
          then:
            - sensor.template.publish:
                id: ${device_name}_move_distance
                state: !lambda return x;
      - name: move_energy_sensor
        internal: true
        on_value:
          then:
            - sensor.template.publish:
                id: ${device_name}_move_energy
                state: !lambda return x;
      - name: static_distance_sensor
        internal: true
        on_value:
          then:
            - sensor.template.publish:
                id: ${device_name}_static_distance
                state: !lambda return x;
      - name: static_energy_sensor
        internal: true
        on_value:
          then:
            - sensor.template.publish:
                id: ${device_name}_static_energy
                state: !lambda return x;
      - name: detection_distance_sensor
        internal: true
        on_value:
          then:
            - sensor.template.publish:
                id: ${device_name}_detection_distance
                state: !lambda return x;

text_sensor:
  - platform: wifi_info
    ip_address:
      name: ${device_name}_ip
    mac_address:
      name: ${device_name}_mac
  - platform: template
    id: ${device_name}_mmw_status
    name: ${device_name}_mmw_status

remote_transmitter:
  pin: 1
  carrier_duty_percent: 50%
